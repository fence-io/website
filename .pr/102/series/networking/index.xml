<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Networking on Fence</title><link>https://fence-io.github.io/website/.pr/102/series/networking/</link><description>Recent content in Networking on Fence</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 25 May 2024 12:53:31 +0000</lastBuildDate><atom:link href="https://fence-io.github.io/website/.pr/102/series/networking/index.xml" rel="self" type="application/rss+xml"/><item><title>Decoding Kubernetes Pod Creation and Network Traffic Management</title><link>https://fence-io.github.io/website/.pr/102/articles/networking/kubernetes-networking/</link><pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/102/articles/networking/kubernetes-networking/</guid><description>This article delves into the underlying processes involved in creating a pod and traces the path of network traffic within a Kubernetes cluster, from an initial web request to the container hosting the application. We will explore:
What steps involved in the pod creation How containers communicate locally (Intra-Pod communication). Pod-to-Pod communication when the pods are on the same and different nodes. Pod-to-Service communication, where a pod sends traffic to another pod behind a service in Kubernetes.</description></item><item><title>Diving deep into Container Networking (An Exploration of Linux Network Namespace)</title><link>https://fence-io.github.io/website/.pr/102/articles/networking/diving-deep-into-container-networking/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/102/articles/networking/diving-deep-into-container-networking/</guid><description>Introduction # Container networking might seem complex and almost mystical initially, but it&amp;rsquo;s actually built on basic Linux networking principles. By understanding these fundamentals, we can troubleshoot the container networking layers on a profound level. Furthermore, we might even create container networking solution from scratch for pure enjoyment.
In this article we are going to cover the foundational elements of container networking, from the underlying principles of network namespaces to the practical tools and techniques for managing container networking environments.</description></item><item><title>Setting up Load Balancer Service with Cilium in KinD Cluster</title><link>https://fence-io.github.io/website/.pr/102/articles/networking/setting-up-load-balancer-service-with-cilium-in-kind-cluster/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/102/articles/networking/setting-up-load-balancer-service-with-cilium-in-kind-cluster/</guid><description>Kubernetes in Docker (KinD) offers a lightweight and efficient way to run Kubernetes clusters for development and testing purposes. However, setting up KinD with load balancing option requires specific networking configurations. In this article, we&amp;rsquo;ll explore the networking configuration of KinD on both Linux and MacOS, deep dive into load balancing options and discuss troubleshooting tactics.
Requirements # Docker KinD Kubectl Ciliumctl Setting Up Kubernetes in Docker # To create a KinD cluster with two nodes, you can use the following configuration:</description></item></channel></rss>