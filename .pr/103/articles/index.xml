<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Articles on Fence</title><link>https://fence-io.github.io/website/.pr/103/articles/</link><description>Recent content in Articles on Fence</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://fence-io.github.io/website/.pr/103/articles/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Policy Engine - kubewarden</title><link>https://fence-io.github.io/website/.pr/103/articles/policy-engine/kubewarden-review/</link><pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/103/articles/policy-engine/kubewarden-review/</guid><description>Introduction # kubewarden is a Kubernetes-native policy engine designed to enforce custom security policies across Kubernetes clusters. This article will delve into the types of policies supported by Kubewarden, the syntax and language used to write these policies, its audit mode and reporting capabilities, observability features, offline evaluation in CI pipelines, and the extensive policies catalog.
Overview and Purpose # Kubewarden integrates seamlessly into Kubernetes environments, offering a robust solution for implementing and enforcing security policies.</description></item><item><title>Decoding Kubernetes Pod Creation and Network Traffic Management</title><link>https://fence-io.github.io/website/.pr/103/articles/networking/kubernetes-networking/</link><pubDate>Fri, 24 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/103/articles/networking/kubernetes-networking/</guid><description>This article delves into the underlying processes involved in creating a pod and traces the path of network traffic within a Kubernetes cluster, from an initial web request to the container hosting the application. We will explore:
What steps involved in the pod creation How containers communicate locally (Intra-Pod communication). Pod-to-Pod communication when the pods are on the same and different nodes. Pod-to-Service communication, where a pod sends traffic to another pod behind a service in Kubernetes.</description></item><item><title>Diving deep into Container Networking (An Exploration of Linux Network Namespace)</title><link>https://fence-io.github.io/website/.pr/103/articles/networking/diving-deep-into-container-networking/</link><pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/103/articles/networking/diving-deep-into-container-networking/</guid><description>Introduction # Container networking might seem complex and almost mystical initially, but it&amp;rsquo;s actually built on basic Linux networking principles. By understanding these fundamentals, we can troubleshoot the container networking layers on a profound level. Furthermore, we might even create container networking solution from scratch for pure enjoyment.
In this article we are going to cover the foundational elements of container networking, from the underlying principles of network namespaces to the practical tools and techniques for managing container networking environments.</description></item><item><title>Validating Kubernetes resources offline - kubeconform review</title><link>https://fence-io.github.io/website/.pr/103/articles/k8s-resources-validation/kubeconform-review/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/103/articles/k8s-resources-validation/kubeconform-review/</guid><description>In this article, we will explore kubeconform, the successor to kubeval.
Kubeconform is based on the same principles as kubeval, but it is actively maintained and has some unique features.
Introduction # As the two tools are very similar, I invite you to consult the article on kubeval which also applies to kubeconform.
Resource Schemas # Kubeconform uses JSON schemas to validate (or invalidate) the proposed resources. These JSON schemas are created from the OpenAPI schemas published within the Kubernetes GitHub repository.</description></item><item><title>Validating Kubernetes resources offline - kubeval review</title><link>https://fence-io.github.io/website/.pr/103/articles/k8s-resources-validation/kubeval-review/</link><pubDate>Sun, 05 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/103/articles/k8s-resources-validation/kubeval-review/</guid><description>In this article, we will discuss validating Kubernetes resource definitions using the tool kubeval.
Before we begin, it&amp;rsquo;s important to note that kubeval is no longer maintained, and the author advises migrating to kubeconform. We will explore kubeconform in the next article.
Introduction # Validating Kubernetes resources is very useful for detecting non-compliant resources before applying them to a cluster. The most common use case is to perform validation during CI to validate (or invalidate) the quality of a pull request.</description></item><item><title>Setting up Load Balancer Service with Cilium in KinD Cluster</title><link>https://fence-io.github.io/website/.pr/103/articles/networking/setting-up-load-balancer-service-with-cilium-in-kind-cluster/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://fence-io.github.io/website/.pr/103/articles/networking/setting-up-load-balancer-service-with-cilium-in-kind-cluster/</guid><description>Kubernetes in Docker (KinD) offers a lightweight and efficient way to run Kubernetes clusters for development and testing purposes. However, setting up KinD with load balancing option requires specific networking configurations. In this article, we&amp;rsquo;ll explore the networking configuration of KinD on both Linux and MacOS, deep dive into load balancing options and discuss troubleshooting tactics.
Requirements # Docker KinD Kubectl Ciliumctl Setting Up Kubernetes in Docker # To create a KinD cluster with two nodes, you can use the following configuration:</description></item></channel></rss>